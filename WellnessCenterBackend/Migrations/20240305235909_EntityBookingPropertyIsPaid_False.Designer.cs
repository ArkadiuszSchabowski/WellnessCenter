// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WellnessCenterBackend.Database;

#nullable disable

namespace WellnessCenterBackend.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240305235909_EntityBookingPropertyIsPaid_False")]
    partial class EntityBookingPropertyIsPaid_False
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WellnessCenterBackend.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingDay")
                        .HasColumnType("int");

                    b.Property<int>("BookingHour")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("WellnessCenterBackend.Entities.MassageName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Performer")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MassageNames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Chocolate Massage - Description",
                            Performer = 2,
                            Price = 199,
                            ServiceName = "Chocolate Massage",
                            ServiceTime = 60
                        },
                        new
                        {
                            Id = 2,
                            Description = "Honey Massage Description",
                            Performer = 1,
                            Price = 119,
                            ServiceName = "Honey Massage",
                            ServiceTime = 45
                        },
                        new
                        {
                            Id = 3,
                            Description = "Clasic Massage Description",
                            Performer = 3,
                            Price = 99,
                            ServiceName = "Classic Massage",
                            ServiceTime = 60
                        });
                });

            modelBuilder.Entity("WellnessCenterBackend.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("WellnessCenterBackend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "zajączek@o2.pl",
                            FirstName = "Dominika",
                            HashPassword = "12345",
                            LastName = "Zając",
                            Login = "Dominika123",
                            Phone = "500-600-700",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "młyniok@o2.pl",
                            FirstName = "Paulina",
                            HashPassword = "23456",
                            LastName = "Młyniok",
                            Login = "Paulina123",
                            Phone = "501-601-701",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "szum@o2.pl",
                            FirstName = "Renata",
                            HashPassword = "34567",
                            LastName = "Szum",
                            Login = "Renata123",
                            Phone = "502-602-702",
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("WellnessCenterBackend.Entities.User", b =>
                {
                    b.HasOne("WellnessCenterBackend.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WellnessCenterBackend.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
